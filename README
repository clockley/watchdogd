_______________________________________________________________________________________________________________________________________
***
Hi all, if you use this software or are intrested in using it could you please email me at clockley1@gmail.com ?
I'm intrested in learning what the various usecases and deficiencies in the program and/or documentation.
  Regards,
    Christian Lockley
***
_______________________________________________________________________________________________________________________________________
NAME
----
	watchdogd - A watchdog daemon.

SYNOPSIS
--------

	watchdogd [-F] [-q] [-s] [-b] [-f] [-c <config_file>]

DESCRIPTION
-----------

	A watchdog timer(WDT) is an electronic timer that is used to automatically
	recover from software or hardware error. Normally a software program(in this case watchdogd)
	restarts the watchdog timer to prevent it from timing out and rebooting the system.

	In addition the regularly resetting the WDT, watchdogd(the daemon) can be configured to
	actively monitor key system metrics and take appropriate action via repair scripts.

	watchdogd comes with several built-in test:

	* Ping IP addresses and check for answer(IPv4 and IPv6)

	* Check load average

	* Execute check/repair scripts found in /etc/watchdog.d

	* Execute a user defined an arbitrary command.

OPTIONS
-------

	-F Skip legacy SysV daemon initialization steps, useful for systemd.

	-s Regularly schedule file system synchronization with sync().

	-b Reboot system for certain non-fatal errors.

	-f Force a configuration that could make your system unstable.

	-c Path to configuration file. default is /etc/watchdogd.conf .


CONFIGURATION FILE OPTIONS
--------------------------

	The configuration file uses a simple format where x is the variable name
	and the value that is assigned comes after the the equal sign ex. x = 1

	Examples:

	float_option = 2.2
	char_option = "string"
	bool_option = true

	C++ and Unix shell comments are supported.
				       ----------------------------------------
	test-directory = <string>
	All scripts in this folder will be automatically executed.
	See REPAIR SCRIPT section.

	interval = <int>
	Set the time in seconds between two pings the watchdog device.
	Default value is 1 second.

	max-load-1 = <float>
	If the one minute system load average exceeds this value watchdogd
	will reboot the system.

	max-load-5 = <float>
	If the five minute system load average exceeds this value watchdogd
	will reboot the system.

	max-load-15 = <float>
	If the fifteen minute system load average exceeds this value watchdogd
	will reboot the system.

	enable-load-monitor = <bool>
	If this option is undefined or set to false the max-load-* options are
	ignored.

	min-memory = <int>
	The amount of virtual memory ram+pagefile in pages that must stay free.
	If free memory is less than value given the watchdog daemon will reboot
	the system.
	watchdog-device = <string>
	The path to the watchdog device.

	use-pid-file = <bool>
	This option is ignored if watchdogd is not running in daemon mode.

	watchdog-timeout = <int>
	Set the watchdog device timeout. If the daemon can't set the timeout it
	will exit with an error message.

	pid-files = <array>
	pid-files is an array that contains the list of pid files that watchdogd in
	to parse. If the pid specified in the pidfile is not valid the repair-binary
	will run. Is the repair-binary return an error code greater than zero or is
	not specified in the configuration watchdogd will reboot the system.
	Example:
		pid-files= ["/var/run/sendsnail.pid", "/var/run/pumpdaudio.pid",
		"/var/run/lightdm.pid", "/var/run/nat.pid"]

	softboot = <bool>
	Reboot the system if watchdogd is unable to open a pidfile.

	lock-memory = <bool>
	Lock memory if set to true. Default true.

	sync = <bool>
	Sync file systems with the sync() call every time watchdogd is awake.

REPAIR SCRIPTS
--------------
TODO

FILES
-----

	/etc/watchdogd.conf .
